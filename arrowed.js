// Generated by CoffeeScript 1.3.3

/*
  ArrowedJS
  Version 1.0
  Copyright (c) 2013 Abel Martin
  Licensed under the MIT license
*/


(function() {

  window.ArrowJS = {
    _paper: null,
    _target: null,
    _source: null,
    _paper_element: 'body',
    _target_padding: 15,
    _arrow_attrs: {
      stroke: 'rgb(57, 180, 213)',
      'stroke-width': 6,
      'stroke-linecap': 'round',
      'arrow-end': 'open-wide-midium'
    },
    _debug_stroke: function() {
      if (this._paper != null) {
        return this._paper.rect(0, 0, 700, 400, 10).attr({
          stroke: "#f00"
        });
      }
    },
    _center: function($element) {
      var center, offset;
      offset = $element.offset();
      return center = [offset.left + ($element.width() / 2), offset.top + ($element.height() / 2)];
    },
    _draw_arrow: function(image_center_location, target_end_location) {
      var arrow, arrow_path, curve_outlier_location;
      curve_outlier_location = [0, 220];
      arrow_path = [['M'].concat(image_center_location), ['S'].concat(curve_outlier_location).concat(target_end_location)];
      return arrow = this._paper.path(arrow_path).attr(this._arrow_attrs);
    },
    init: function(stage_attrs, arrow_attrs) {
      if (arrow_attrs == null) {
        arrow_attrs = {};
      }
      this._stage_attrs = stage_attrs;
      this._arrow_attrs = arrow_attrs;
      if (this._paper == null) {
        this._paper = Raphael(stage_attrs.container, stage_attrs.width, stage_attrs.height);
        return $('svg', this.$selector).attr('style', 'overflow: hidden; position: absolute;');
      }
    },
    clear: function() {
      this._paper.clear();
      if (this._debug != null) {
        return this._debug_stroke();
      }
    },
    remove: function() {
      return this._paper.remove();
    },
    draw: function(source_selector, target_selector, options) {
      var $source, $target, target_location, target_offset;
      $source = $(source_selector);
      $target = $(target_selector);
      target_offset = $target.offset();
      target_location = [target_offset.left + this._target_padding, target_offset.top - this._target_padding + $target.height()];
      return this._draw_arrow(this._center($source_selector), target_location);
    }
  };

}).call(this);
